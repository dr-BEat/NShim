<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
var numParameters = 2;
#>
using System;

namespace NShim
{
    public partial class Shim
    {
		#region Actions

        public static ShimBuilder ReplaceAction(Action methodgroup)
        {
            return new ShimBuilder(methodgroup);
        }
		<# for(int i=1;i<=numParameters;i++)
		{
			var types = string.Join(", ", Enumerable.Range(1, i).Select(j => $"T{j}"));
		#>

		public static ShimBuilder<<#= types #>> ReplaceAction<<#= types #>>(Action<<#= types #>> methodgroup)
        {
            return new ShimBuilder<<#= types #>>(methodgroup);
        }
		<# } #>
#endregion

		#region Funcs

        public static ShimBuilderFunc<T> ReplaceFunc<T>(Func<T> methodgroup)
        {
            return new ShimBuilderFunc<T>(methodgroup);
        }
		<# for(int i=1;i<=numParameters;i++)
		{
			var types = string.Join(", ", Enumerable.Range(1, i).Select(j => $"T{j}"));
		#>

		public static ShimBuilderFunc<<#= types #>, TResult> ReplaceFunc<<#= types #>, TResult>(Func<<#= types #>, TResult> methodgroup)
        {
            return new ShimBuilderFunc<<#= types #>, TResult>(methodgroup);
        }
		<# } #>
#endregion
    }

	#region Action ShimBuilder

    public struct ShimBuilder
    {
        private readonly Action _methodgroup;

        public ShimBuilder(Action methodgroup)
        {
            _methodgroup = methodgroup;
        }

        public Shim With(Action shim)
        {
            return new Shim(_methodgroup, shim);
        }
    }
	<# for(int i=1;i<=numParameters;i++)
	{
		var types = string.Join(", ", Enumerable.Range(1, i).Select(j => $"T{j}"));
	#>

	public struct ShimBuilder<<#= types #>>
    {
		private readonly Action<<#= types #>> _methodgroup;

        public ShimBuilder(Action<<#= types #>> methodgroup)
        {
            _methodgroup = methodgroup;
        }

        public Shim With(Action<<#= types #>> shim)
        {
            return new Shim(_methodgroup, shim);
        }
    }
	<# } #>
#endregion

	#region Func ShimBuilder

    public struct ShimBuilderFunc<T>
    {
		private readonly Func<T> _methodgroup;

        public ShimBuilderFunc(Func<T> methodgroup)
        {
            _methodgroup = methodgroup;
        }

        public Shim With(Func<T> shim)
        {
            return new Shim(_methodgroup, shim);
        }
    }
	<# for(int i=1;i<=numParameters;i++)
	{
		var types = string.Join(", ", Enumerable.Range(1, i).Select(j => $"T{j}"));
	#>

    public struct ShimBuilderFunc<<#= types #>, TResult>
    {
		private readonly Func<<#= types #>, TResult> _methodgroup;

        public ShimBuilderFunc(Func<<#= types #>, TResult> methodgroup)
        {
            _methodgroup = methodgroup;
        }

        public Shim With(Func<<#= types #>, TResult> shim)
        {
            return new Shim(_methodgroup, shim);
        }
    }
	<# } #>
#endregion
}